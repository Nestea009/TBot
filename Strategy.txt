New Strat: Highest Highs and Lowest Lows

We cannot perfectly describe a low point, so:

0. If we buy and instantly start falling, wait some time, if we're still loosing:
  a) Set a new floor and lose that bit of money (great fall could be ahead, and we would lose a lot of money)
  b) Sell, and wait for a rise to buy (not sustainable, perpetual loss possible)
  But if we're suddenly rising, leave it.

Having entered the market correctly on an uptrend: 

- Note: Our Lowest Low isn't supposed to change, it is what it's set to be

1. Buy at a low point and mark it as the lowest low (with the previous problem)

2. Wait for a Highest High and mark it as such

3. Get the difference between the lowest low and the highest High; that's our window,

Sell (on a benefit) if: 

  a) We go below 60% of the window (to be adjusted)
  b) We go above 150%, WAIT FOR A FALL (to be adjusted)

Problem: We cannot determine when to start buying
Solution: Learn to determine a rising pattern

- A rising trend is defined as a series of highs and lows that are 
higher than the last high and the last low. The trend continues if the 
previous condition is met, but will fail to do so as soon as a 
new high doesn't go higher than the previous. Note: a lower low doesn't affect
the trend unless it goes too far down (unlikely).

- This definition won't give us a clear idea of when to buy and sell, 
because that's what our strategy does, this definition will 
give us a clear understanding of when to buy with a clear view 
towards an uptrend. :)

Algorithmic Solution: Wait for a low, a high, a new low and a new high. If
the conditions are such of an uptrend, buy, if they're not, repeat. 

- Our Window will be defined as the interval between a lowest low and a 
highest high. Our strategy will take advantage of this window so that if 
the price falls below 50% (adjustable) of the maximum profit (aka, the window)
we sell at a Minimum Win. However, if instead of passing below 50% we go above 
125% (also adjustable) we will change the window to the new highest high and 
the price sell limit to 90% instead of 50%. 
(Note that the highest high will always be renewed if the price goes up
until it reaches 125% of the initial highest high)

Problem: Finding a Highest High

- Besides a highest high being easily defined, it is hard to 
determine when one has happened via numbers. If we define it 
as a fall from the previous price we risk perpetual loss.
(It could lose at a slower rate than we need to say that 
a highest high has happened)
But if we define it according to the Lowest Low, 
it's possible that we never reach the high point 
set as a minnimum or even lose money without ever 
getting to the minnimum either. 

Solution: You dumb bitch, we don't need to sell: 
A highest high is just the highest point until now.

def FindHighestHigh():
  #Find 5 values without loosing 15% of the Lowest Low and the highest will be the initial highest high. 
  initial_highest_high = (highest value)
  return initial_highest_high

last_highest_high = FindHighestHigh()

if (actual_price > last_highest_high) and (actual_price !> (initial_highest_high * 1.25)):
  last_highest_high = actual_price 
elif actual_price > (initial_highest_high * 1.25)
  higher_high = actual price 

window = last_highest_high - lowest_low

if actual_price < (lowest_low * 0.9):
  PlaceSellAPPL()
  print ("Sold at a loss")

Idea: As soon as we find a low lower than the last low, we sell 

- In order to do that we would need to keep track of the lows (hard)

- If we manage to do it, we could potentially notice different lows 
and notice when a low is lower than the last one, such as that if 
the difference is too much, we would sell because of a 
Potential Loss.

- The ideal range for now is 

if new_low < (last_low * 0.9): 
  PlaceSellAPPL()
  print("Sold because of potential loss")
  uptrend = False


Essential Concept: When to sell 

At a benefit: 

- Being that we're on an uptrend, we want to 
notice all the highs and lows and mark them 
as such. Then sell whenever a new high is not 
as high as the last by a big enough margin 
(Selling at a Maximmum Loss), or whenever 
the actual price goes below the last low
(The uptrend will have finished).

At a loss:

- Take the code responsible for selling 
at a loss out; it sells because we're 
0.9 * lowest_low, instead of that, we'll 
sell inmediately at the lowest low, because 
that way we're always in an uptrend. 

Problem: How do we notice low points

- A low point is defined as the point with the 
lowest value between 2 high points. It is also 
defined as the middle point between a fall and
a rise, (in that order). Now, how long the fall
and the rise need to be is up to us and could 
lead to problems. However, if we use our 
rise and fall funcitions for now, I believe 
we can avoid the problem.

In order to sell we will check if the new low is lower than the last low, if it is sell
(As far as I'm concerned) we can look for a fall, check the last low and if the 
last condition is met sell (that way we sell at a rise)

new_low = FindLow() # Make the function look for a low for like 10s, if it doestn't find, return 0

if new_low != 0:
  if new_low < last_low: 
    WaitForFall()
    PlaceSellAPPL()
    print("Sold because uptrend is over")
    uptrend = False
  elif new_low > last_low:
    last_low = new_low

Idea: Having another python script that keeps track of highs and lows (good idea)

- This way we avoid all of the time problems and we dedicate the RealMain.py 
to the logic of when to buy and sell. This would also be a lot cleaner and
easier to understand. 

- The problem is we would probably need to rewrite like all of the code. 

- Yeah we might need to do that. Fuck. 

Aight, lets do it:

What do we need for it?

- We need a code that returns a variable every time it 
finds a high or a low. For that we can just make a high and
low detector and asign a variable that becomes true if 
it finds one. 

- (For now) There is no way to run a function within 
a script without it taking time, that is the only issue 
we have right now. 

#RealMain.py

if Low == True:
  whatever

#Main.py 

if FindLow() == True:
  Low = True

